name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"
      - name: Install Dependencies
        run: poetry install --without dev
      # - name: Run Tests
      #   run: |
      #     python manage.py test
  build:
    if: github.ref == 'refs/heads/master'
    needs: "test"
    runs-on: ubuntu-latest
    outputs:
      image_id: ${{ steps.docker-push.outputs.imageid }}
    steps:
      - name: "Authenticate to Google Cloud"
        id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Log in to GAR
        uses: docker/login-action@v2
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        id: "docker-push"
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}:backend"
          push: true
          tags: ${{ secrets.IMAGE_REPO }}:latest
          outputs: "type=image"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - uses: actions/checkout@v3
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          create_credentials_file: true
          workload_identity_provider: ${{ secrets.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v2

      - name: Lint Terraform
        id: fmt
        run: terraform fmt -check

      - name: Plan
        id: plan
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          IMAGE_ID: ${{ needs.build.outputs.image_id }}
        working-directory: backend/terraform/environments/dev
        run: |
          terraform init
          terraform plan -var "container_image=${{ secrets.IMAGE_REPO }}@$IMAGE_ID" -out=tfplan

      - name: Run Deploy
        if: github.ref == 'refs/heads/master'
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        working-directory: backend/terraform/environments/dev
        run: |
          terraform apply tfplan
